#Applying a Guassian Mixture Model (GMM) to classify Productivity-Susceptibility Analysis (PSA) data
#Plotting PSA Data and GMM ellipses in 2D graph

#Import packages
import pandas as pd
import numpy as np
from matplotlib.patches import Ellipse
import matplotlib.transforms as transforms
import matplotlib.pyplot as plt
import matplotlib as mpl
import sklearn

#Import data
data = '/Users/gbaillargeon/Documents/PSV_Data_Final.txt'
X = pd.read_csv(data, delimiter='\t')

#Definition for making an ellipse
def confidence_ellipse(x, y, ax, n_std=2.6, facecolor='none', **kwargs):
    """
    Create a plot of the covariance confidence ellipse of `x` and `y`

    Parameters
    ----------
    x, y : array_like, shape (n, )
        Input data.

    ax : matplotlib.axes.Axes
        The axes object to draw the ellipse into.

    n_std : float
        The number of standard deviations to determine the ellipse's radiuses.

    Returns
    -------
    matplotlib.patches.Ellipse

    Other parameters
    ----------------
    kwargs : `~matplotlib.patches.Patch` properties
    """
    if x.size != y.size:
        raise ValueError("x and y must be the same size")

    cov = np.cov(x, y)
    pearson = cov[0, 1] / np.sqrt(cov[0, 0] * cov[1, 1])
    # Using a special case to obtain the eigenvalues of this
    # two-dimensionl dataset.
    ell_radius_x = np.sqrt(1 + pearson)
    ell_radius_y = np.sqrt(1 - pearson)
    ellipse = Ellipse((0, 0),
                      width=ell_radius_x * 2,
                      height=ell_radius_y * 2,
                      facecolor=facecolor,
                      **kwargs)

    # Calculating the stdandard deviation of x from
    # the squareroot of the variance and multiplying
    # with the given number of standard deviations.
    scale_x = np.sqrt(cov[0, 0]) * n_std
    mean_x = np.mean(x)

    # calculating the stdandard deviation of y ...
    scale_y = np.sqrt(cov[1, 1]) * n_std
    mean_y = np.mean(y)

    transf = transforms.Affine2D() \
        .rotate_deg(45) \
        .scale(scale_x, scale_y) \
        .translate(mean_x, mean_y)

    ellipse.set_transform(transf + ax.transData)
    return ax.add_patch(ellipse)

#Write and Apply GMM
#setting random state to 1000 ensures consistent clustering with each run
#n_components sets number of clusters
from sklearn.mixture import GaussianMixture as GMM
gmm = GMM(n_components=4, random_state=1000, covariance_type='full').fit(X.loc[0:32,['Productivity','Susceptibility']])

#labels assigns a number denoting what cluster a data point belongs to
labels = gmm.predict(X.loc[0:32,['Productivity','Susceptibility']])
print(labels)

#Calculate silhouette coefficient (SC)
#SC determines how many clusters best fit the data
print(sklearn.metrics.silhouette_score(X.loc[0:32,['Productivity','Susceptibility']], labels, metric='euclidean'))

#creates list of cluster labels aligned with productivity, susceptibility, vulnerability, and species name
X['cluster_id'] = labels.tolist()

#centoids outputs the cluster centers for each cluster using the gmm.means_ function
centroids = gmm.means_
centroids0 = centroids[0]
centroids1 = centroids[1]
centroids2 = centroids[2]
centroids3 = centroids[3]

#Generating clusters to be plotted based on cluster_id
#This will change depending on dataset, below is the clustering and labels for our PSA data

"Unsustainable Cluster"
#Special Case: only 2 data points containted within this cluster
#accurate ellipse shpae needs at least 3 data points
#create 2 additional data point using average standard deviation of points within all clusters
#new point based on adding and subtracting average standard deviation value from cluster center
cluster0 = X[X.cluster_id== 0]
x0 = cluster0['Productivity']
y0 = cluster0['Susceptibility']
c = centroids0[0]
d = centroids0[1]
e = pd.Series(c + .1175)
f = pd.Series(c-.1175)
g = pd.Series(d +.1075)
h = pd.Series(d-.1075)
x0 = x0.append(e)
x0 = x0.append(f)
y0 = y0.append(f)
y0 = y0.append(h)

"Sustainable Cluster"
cluster1 = X[X.cluster_id== 1]
x1 = cluster1['Productivity']
y1 = cluster1['Susceptibility']

"Highly Sustainable Cluster"
cluster2 = X[X.cluster_id== 2]
x2 = cluster2['Productivity']
y2 = cluster2['Susceptibility']

"Firefishes Cluster - Special Case"
#Special Case:data points are contained in this cluster but 2 are identical, therefore there are only 2 data points to create ellipse
#accurate ellipse shpae needs at least 3 data points
#create 2 additional data point using average standard deviation of points within all clusters
#new point based on adding and subtracting average standard deviation value from cluster center
cluster3 = X[X.cluster_id == 3]
x3 = cluster3['Productivity']
y3 = cluster3['Susceptibility']
r = centroids3[0]
z = centroids3[1]
a = pd.Series(r+.1175)
b = pd.Series(r-.1175)
l = pd.Series(z+.1075)
k = pd.Series(z-.1075)
x3 = x3.append(a)
x3 = x3.append(b)
y3 = y3.append(l)
y3 = y3.append(k)

#plotting the PSA data and ellipses generated by GMM clusters using matplotlib
fig, ax_kwargs = plt.subplots(figsize=(6, 6))

ax_kwargs.axvline(c='grey', lw=1)
ax_kwargs.axhline(c='grey', lw=1)

#creating graphical ellipses using def confidence_ellipse from above
#alpha controls transparency of ellipse
confidence_ellipse(x2, y2, ax_kwargs,
    alpha=.6, facecolor='green', edgecolor='green', zorder=0)
confidence_ellipse(x1, y1, ax_kwargs,
    alpha=.6, facecolor='orange', edgecolor='orange', zorder=0)
confidence_ellipse(x0, y0, ax_kwargs,
  alpha=.6, facecolor='red', edgecolor='red', zorder=0)
confidence_ellipse(x3, y3, ax_kwargs,
  alpha=.6, facecolor='purple', edgecolor='purple', zorder=0)

#plot productivity (x-axis) and susceptibility (y-axis) data as a scatter plot
ax_kwargs.scatter(x=X.loc[0:32,['Productivity']], y=X.loc[0:32,['Susceptibility']], s=50, cmap = 'RdYlGn', marker='o', edgecolor = 'black')

#plot cluster centers on the same scatter plot
ax_kwargs.scatter(x = centroids[:,0], y=centroids[:,1], s=50, c='gray')

#defines the plot bounds, label axes, and plot x-axis in reverse direction
plt.xlim(3., 1.)
plt.ylim(1., 3.)
plt.xlabel('Productivity')
plt.ylabel('Susceptibility')

#displays final plot
plt.show()
